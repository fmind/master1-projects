
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------

VERIFIE Proposition existe
VERIFIE CommandeProducteur.quantite_commandee <= (Proposition.quantite_proposee - Proposition.quantite_commandee)
ET MAJ Proposition.quantite_commandee += CommandeProducteur.quantite_commandee
ET MAJ Proposition.modifie_le = NOW()

CREATE FUNCTION function_check_quantite_commandee_proposee () RETURNS TRIGGER AS $function_check_quantite_commandee_proposee$
  DECLARE
    quantite_disponible integer;
  BEGIN 
    SELECT INTO quantite_disponible (p.quantite_proposee - p.quantite_commandee)
    FROM gestion_proposition p
    WHERE p.id = NEW.proposition_id;
    
    IF quantite_disponible IS NULL THEN
    	RAISE EXCEPTION 'La proposition fournisseur associée à la commande n''a pas été trouvée';
    END IF;
    
    IF NEW.quantite_commandee > quantite_disponible THEN
    	RAISE EXCEPTION 'La quantité commandée ne peut pas être supérieur à la quantité disponible (qte dispo : %, qte commandée : %)', quantite_disponible, NEW.quantite_commandee;
    END IF;
    
   	UPDATE gestion_proposition
   	SET quantite_commandee = quantite_commandee + NEW.quantite_commandee,
   	modifie_le = now()
   	WHERE id = NEW.proposition_id;
   
    RETURN NEW;
  END; 
$function_check_quantite_commandee_proposee$ LANGUAGE 'plpgsql';


CREATE TRIGGER trigger_check_quantite_commandee_proposee BEFORE INSERT ON gestion_commandeproducteur
FOR EACH ROW
EXECUTE PROCEDURE function_check_quantite_commandee_proposee()


------------------------------------------------------------------------------------------------------------------------------

INSERT INTO gestion_producteur(siret, nom, adresse, login, password, ajoute_le, modifie_le) VALUES ('SIRET', 'NOM', 'ADRESSE', 'LOGIN', 'PASSWORD', '2012-12-20', '2012-12-20');
INSERT INTO gestion_typeproduit(intitule, legume, photo) VALUES ('POMME', false, '');
INSERT INTO gestion_proposition(quantite_proposee, quantite_commandee, prix, date_peremption, ajoute_le, modifie_le, producteur_id, type_produit_id) VALUES (100, 0, 10, '2012-12-20', '2012-12-20', '2012-12-20',1,1);

INSERT INTO gestion_trimestre(saison, annee, prix_panier) VALUES (1, 2012, 30);
INSERT INTO gestion_periode(semaine, trimestre_id) VALUES (1, 1);
INSERT INTO gestion_amap(nom, adresse, email) VALUES ('NOM_AMAP', 'ADRESSE_AMAP', 'EMAIL_AMAP');

SELECT * FROM gestion_proposition;
INSERT INTO gestion_commandeproducteur(quantite_commandee, ajoute_le, proposition_id, periode_id, amap_id) VALUES (10, '2012-12-20', 1, 1, 1);
SELECT * FROM gestion_proposition;
INSERT INTO gestion_commandeproducteur(quantite_commandee, ajoute_le, proposition_id, periode_id, amap_id) VALUES (15, '2012-12-20', 1, 1, 1);

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
INSERTION AUTOMATIQUE DES PERIODES POUR UN NOUVEAU TRIMESTRE


CREATE FUNCTION function_create_periodes () RETURNS TRIGGER AS $function_create_periodes$
  DECLARE
    num_semaine_debut integer;
    num_semaine_fin integer;
  BEGIN 
  	
  	num_semaine_debut := (NEW.saison - 1) * 13 + 1;
  	num_semaine_fin := num_semaine_debut + 12;
  
  	FOR i IN num_semaine_debut..num_semaine_fin LOOP
  		INSERT INTO gestion_periode(semaine, trimestre_id) VALUES(i, NEW.id);
	END LOOP;
	
    RETURN NEW;
  END; 
$function_create_periodes$ LANGUAGE 'plpgsql';


CREATE TRIGGER trigger_create_periode AFTER INSERT ON gestion_trimestre
FOR EACH ROW
EXECUTE PROCEDURE function_create_periodes()


------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM gestion_trimestre;
SELECT * FROM gestion_periode;

INSERT INTO gestion_trimestre(saison, annee, prix_panier) VALUES (2, 2012, 31);
INSERT INTO gestion_trimestre(saison, annee, prix_panier) VALUES (3, 2012, 31);
INSERT INTO gestion_trimestre(saison, annee, prix_panier) VALUES (4, 2012, 31);
INSERT INTO gestion_trimestre(saison, annee, prix_panier) VALUES (1, 2013, 28);

------------------------------------------------------------------------------------------------------------------------------

ID :
1 Printemps : Semaines 1 - 13 
2 Eté		: Semaines 14 - 26
3 Automne 	: Semaines 27 - 39
4 Hiver		: Semaines 40 - 52


1		14		27		40
2		15		28		41
3		16		29		42
4		17		30		43
5		18		31		44
6		19		32		45
7		20		33		46
8		21		34		47
9		22		35		48
10		23		36		49
11		24		37		50
12		25		38		51
13		26		39		52

------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------







































